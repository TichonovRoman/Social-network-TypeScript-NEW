{"version":3,"file":"static/js/528.a7d650fe.chunk.js","mappings":"kNACA,EAA+B,kCAA/B,EAAoF,sC,4BCyCpF,EAlC+B,SAACA,GAE5B,OAA0BC,EAAAA,EAAAA,UAASD,EAAME,QAAzC,eAAKA,EAAL,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAKG,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACNH,EAAUH,EAAME,UACjB,CAACF,EAAME,SAaV,OAAO,yBACFE,GACK,0BACE,iBAAMG,cAdG,WACjBF,GAAU,IAaF,SAAoCH,GAAU,eAChD,0BACE,kBACIM,SAVQ,SAACC,GACrBN,EAAUM,EAAEC,cAAcC,QAUdC,OAfuB,WACnCP,GAAU,GACVL,EAAMa,aAAaX,IAcPY,WAAS,EAACH,MAAOT,SCOrC,EAnBoB,SAAC,GAA2D,IAA1Da,EAAyD,EAAzDA,QAASb,EAAgD,EAAhDA,OAAQW,EAAwC,EAAxCA,aACnC,OAAIE,GAEA,4BACI,0BACI,gBAAKC,UAAWC,EAAgBC,IAAKC,OAEzC,iBAAKH,UAAWC,EAAhB,WACK,gBAAKC,IAAKH,EAAQK,OAAOC,SAC1B,uFACiBN,EAAQO,UACtB,qEAAeP,EAAQQ,eAExB,SAAC,EAAD,CAAwBrB,OAAUA,EAAQW,aAAgBA,WAZlD,SAACW,EAAA,EAAD,K,UCxB1B,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCiBvB,EAVsC,SAACxB,GACnC,OACI,iBAAKgB,UAAWC,EAAhB,WACI,gBAAKC,IAAI,qOACRlB,EAAMyB,SACP,oCAAYzB,EAAM0B,kB,UCY9B,EAlBgBC,EAAAA,MAAW,YAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,QAE5BC,EAAgBF,EAAMG,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAiBP,QAASO,EAAEP,QAASC,WAAYM,EAAEN,YAAxCM,EAAEC,OAEhD,OACI,iBAAKjB,UAAWC,EAAhB,WACI,sCACA,0BACI,SAAC,IAAD,CAAgBiB,SAAUL,EACVM,gBAAiB,kBACjBC,cAAe,SAGnC,gBAAKpB,UAAWC,EAAhB,SAA0Ba,U,UC+BtC,GAHyBO,EAAAA,EAAAA,KAfD,SAACC,GACrB,MAAO,CACHV,MAAOU,EAAMC,YAAYX,UAIN,SAACY,GACxB,MAAO,CAEHX,QAAS,SAACY,GAAD,OAAUD,GAASE,EAAAA,EAAAA,IAAqBD,QAMhCJ,CAA6CM,GC/BtE,EAZgB,SAAC3C,GAEZ,OACG,4BACI,SAAC,EAAD,CAAae,QAAWf,EAAMe,QAASb,OAAQF,EAAME,OAAQW,aAAgBb,EAAMa,gBACnF,SAAC,EAAD,Q,oBCgCN+B,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAgBD,OAhBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIC,EAASC,KAAK9C,MAAM+C,MAAMC,OAAOH,OAChCA,IACDA,EAAQC,KAAK9C,MAAMiD,iBAAmBH,KAAK9C,MAAMiD,iBAAiBC,WAAa,KACnEJ,KAAK9C,MAAMmD,QAAQC,KAAK,UAExCN,KAAK9C,MAAMqD,eAAeR,GAC1BC,KAAK9C,MAAMG,UAAU0C,KACxB,oBAED,WACU,OACF,SAAC,EAAD,CAAS9B,QAAS+B,KAAK9C,MAAMe,QAASb,OAAU4C,KAAK9C,MAAME,OAAQW,aAAgBiC,KAAK9C,MAAMa,mBAErG,EAhBC+B,CAAyBjB,EAAAA,WA2B/B,GAAe2B,EAAAA,EAAAA,KACXjB,EAAAA,EAAAA,KARkB,SAACC,GAAD,MAA6C,CAC/DvB,QAASuB,EAAMC,YAAYxB,QAC3Bb,OAAQoC,EAAMC,YAAYrC,OAC1B+C,iBAAkBX,EAAMiB,KAAKtB,GAC7BuB,OAAQlB,EAAMiB,KAAKC,UAIM,CAACH,eAAAA,EAAAA,GAAgBlD,UAAAA,EAAAA,GAAWU,aAAAA,EAAAA,KACrD4C,EAAAA,GAFJ,CAIEb,I,oFCvDWc,EAAiB,SAAC1D,GAE3B,IAWM2D,GAASC,EAAAA,EAAAA,IAAU,CAErBC,cAAe,CACXC,YAAa,IAEjBC,SAhBa,SAACC,GACd,IAAMC,EAAqB,GAO3B,OANKD,EAAOF,YAEDE,EAAOF,YAAYI,OAASlE,EAAMoC,gBACzC6B,EAAOH,YAAP,kBAAgC9D,EAAMoC,cAAtC,wBAFA6B,EAAOH,YAAc,8CAKlBG,GASP/B,SAAU,SAAC8B,GACPhE,EAAMkC,SAAS8B,EAAOF,aACtBH,EAAOQ,eAKf,OACI,kBAAMjC,SAAUyB,EAAOS,aAAvB,WACI,4BAEI,qBAAUC,YAAarE,EAAMmC,gBACnB3B,SAAUmD,EAAOW,aACjB3D,MAAOgD,EAAOK,OAAOF,YACrB7B,GAAG,cACHsC,KAAK,cACLC,MAAO,CAACC,gBAAiBd,EAAOM,OAAOH,YAAc,OAAS,MAEvEH,EAAOM,OAAOH,aAAc,gBAAKU,MAAO,CAACE,MAAO,OAApB,SAA6Bf,EAAOM,OAAOH,cAAqB,SAGjG,0BACI,mBAAQa,KAAM,SAAd,gC","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/universalTextarea/MessageForm.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sunflowerImg\":\"ProfileInfo_sunflowerImg__DlzwZ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__h15iB\"};","import React, {ChangeEvent, ChangeEventHandler, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n    let [spanOn, setSpanOn] = useState(true)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setSpanOn(false)\r\n    }\r\n    const deactivateEditModeAndSetStatus = () => {\r\n        setSpanOn(true)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {spanOn\r\n            ? <div>\r\n                <span onDoubleClick={activateMode}>{status || \"-------\"}</span></div>\r\n            : <div>\r\n                <input\r\n                    onChange={onChangeHandler}\r\n                    onBlur={deactivateEditModeAndSetStatus}\r\n                    autoFocus value={status}/>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport imgPicture from \"../../../img/SunFlower.jpg\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: {\r\n        \"aboutMe\": string,\r\n        \"contacts\": {},\r\n        \"lookingForAJob\": boolean,\r\n        \"lookingForAJobDescription\": string,\r\n        \"fullName\": string,\r\n        \"userId\": number,\r\n        photos: {\r\n            small: string,\r\n            large: string,\r\n        }\r\n    },\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: ProfileInfoPropsType) => {\r\n    if(!profile) { return <Preloader/>}\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.sunflowerImg} src={imgPicture}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                 <img src={profile.photos.large}/>\r\n                <div>\r\n                    Меня зовут: {profile.fullName}\r\n                   <div>Обо мне: {profile.aboutMe}</div>\r\n                </div>\r\n                  <ProfileStatusWithHooks status = {status} updateStatus = {updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__1EBZo\",\"posts\":\"MyPosts_posts__8aaC-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__X70zz\"};","import React from 'react';\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://скачать-ватсап-бесплатно.рус/wp-content/uploads/2018/10/avatarka-dlya-devushek-vatsap-7.jpg'/>\r\n            {props.message}\r\n            <div>Like: {props.likesCount}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {PostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddMessageForm} from \"../../universalTextarea/MessageForm\";\r\n\r\n\r\nconst MyPosts = React.memo(({posts, addPost}: PostsPropsType) => {\r\n\r\n    let postsElements = posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddMessageForm onSubmit={addPost}\r\n                                placeholderText={\"Enter your post\"}\r\n                                textMaxLength={100}\r\n                />\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// type MyPostsPropsType = {\r\n//     posts: Array<PostsDataType>\r\n//     dispatch: (action: ActionsTypes) => void\r\n//     newPostText: string\r\n//\r\n// }\r\nexport type PostsDataType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsDataType>,\r\n    // newPostText: string\r\n\r\n}\r\n\r\ntype mapDispatchToProps = {\r\n    // onPostChange: (text: any) => void,\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type PostsPropsType = MapStatePropsType & mapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToProps => {\r\n    return {\r\n        // onPostChange: (text: any) => dispatch(updateNewPostTextActionCreator(text)),\r\n        addPost: (text) => dispatch(addPostActionCreator(text))\r\n    }\r\n\r\n\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo, {ProfileInfoPropsType} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props: ProfileInfoPropsType) => {\r\n\r\n     return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profile} status={props.status} updateStatus = {props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, setStatus,updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\n\r\n\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void,\r\n    setStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => void,\r\n}\r\ntype MapStatePropsType = {\r\n    profile: {\r\n        \"aboutMe\": string,\r\n        \"contacts\": {},\r\n        \"lookingForAJob\": boolean,\r\n        \"lookingForAJobDescription\": string,\r\n        \"fullName\": string,\r\n        \"userId\": number,\r\n        photos: {\r\n            small: string,\r\n            large: string,\r\n        }\r\n    },\r\n    // isAuth: boolean\r\n    status: string,\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean,\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId= this.props.authorizedUserId ? this.props.authorizedUserId.toString() : \"\"\r\n            if(!userId) this.props.history.push(\"/login\")\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.setStatus(userId)\r\n    }\r\n\r\n    render() {\r\n              return (\r\n            <Profile profile={this.props.profile} status = {this.props.status} updateStatus = {this.props.updateStatus}/>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, setStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\ntype initialValuesType = {\r\n    textMessage: string,\r\n}\r\ntype AddMessageFormPropsType = {\r\n    onSubmit: (text: string) => void,\r\n    placeholderText: string,\r\n    textMaxLength: number\r\n}\r\n\r\ntype ErrorsType = {\r\n    textMessage?: string,\r\n}\r\n\r\n\r\nexport const AddMessageForm = (props: AddMessageFormPropsType) => {\r\n\r\n    const validate = (values: initialValuesType) => {\r\n        const errors: ErrorsType = {};\r\n        if (!values.textMessage) {\r\n            errors.textMessage = 'Before sending, you must fill in this field';\r\n        } else if (values.textMessage.length > props.textMaxLength) {\r\n            errors.textMessage = `Must be ${props.textMaxLength} characters or less`;\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n\r\n        initialValues: {\r\n            textMessage: '',\r\n        },\r\n        validate,\r\n        onSubmit: (values: initialValuesType) => { //автоматически передается в кнопку, здесь можно сделать запрос на сервер\r\n            props.onSubmit(values.textMessage)\r\n            formik.resetForm() //очищаем форму после сабмита\r\n        },\r\n    });\r\n\r\n\r\n    return  (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n\r\n                <textarea placeholder={props.placeholderText}\r\n                          onChange={formik.handleChange}\r\n                          value={formik.values.textMessage}\r\n                          id=\"textMessage\"\r\n                          name=\"textMessage\"\r\n                          style={{backgroundColor :formik.errors.textMessage ? \"pink\" : \"\"}}\r\n                />\r\n                {formik.errors.textMessage ? <div style={{color: \"red\"}}>{formik.errors.textMessage}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <button type={\"submit\"}>Add Message</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddMessageForm;"],"names":["props","useState","status","setStatus","spanOn","setSpanOn","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","profile","className","s","src","imgPicture","photos","large","fullName","aboutMe","Preloader","message","likesCount","React","posts","addPost","postsElements","map","p","id","onSubmit","placeholderText","textMaxLength","connect","state","profilePage","dispatch","text","addPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","compose","auth","isAuth","withRouter","AddMessageForm","formik","useFormik","initialValues","textMessage","validate","values","errors","length","resetForm","handleSubmit","placeholder","handleChange","name","style","backgroundColor","color","type"],"sourceRoot":""}