{"version":3,"file":"static/js/944.0907ff42.chunk.js","mappings":"iNAsBMA,EAAW,SAACC,GACd,IAAMC,EAAqB,GAY3B,OAVKD,EAAOE,WACRD,EAAOC,SAAW,+CAGjBF,EAAOG,MAEA,4CAA4CC,KAAKJ,EAAOG,SAChEF,EAAOE,MAAQ,yBAFfF,EAAOE,MAAQ,8CAKZF,GAGEI,EAAY,SAACC,GAEtB,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CAErBC,cAAe,CACXN,MAAO,GACPD,SAAU,GACVQ,YAAY,EACZC,SAAS,GAEbZ,SAAAA,EACAa,SAAU,SAACZ,EAAD,GAA4D,IAA/Ba,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAClDR,EAAMS,MAAMf,EAAQc,GACpBD,GAAc,MAGlBG,EAA4BT,EAAOU,QAAQf,UAAYK,EAAON,OAAOC,SAAY,OAAS,GAC1FgB,EAAyBX,EAAOU,QAAQd,OAASI,EAAON,OAAOE,MAAS,OAAS,GAGrF,OACI,kBAAMS,SAAUL,EAAOY,aAAvB,WACI,4BACI,kBAAOC,YAAa,QACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOP,OAAOG,MACrBqB,GAAG,QACHC,KAAK,QACLC,OAAQnB,EAAOoB,WACfC,MAAO,CAACC,gBAAiBX,KAG/BA,GACG,gBAAKU,MAAO,CAACE,MAAO,OAApB,SAA6BvB,EAAON,OAAOE,QAC3C,SAER,4BACI,kBAAOiB,YAAa,WACbC,SAAUd,EAAOe,aACjBC,MAAOhB,EAAOP,OAAOE,SACrBsB,GAAG,WACHC,KAAK,WACLC,OAAQnB,EAAOoB,WACfC,MAAO,CAACC,gBAAiBb,GACzBe,KAAM,aAGZf,GACG,gBAAKY,MAAO,CAACE,MAAO,OAApB,SAA6BvB,EAAON,OAAOC,WAC3C,SAGR,4BACI,kBAAO6B,KAAM,WACNV,SAAUd,EAAOe,aACjBU,QAASzB,EAAOP,OAAOU,WACvBc,GAAG,aACHC,KAAK,eALhB,mBAUA,gBAAKG,MAAO,CAACE,MAAO,OAApB,SACKvB,EAAO0B,UAIZ,0BACI,mBAAQF,KAAM,SAAUG,YAAa3B,EAAON,OAAOE,QAAWI,EAAON,OAAOC,UAA5E,yBAuBhB,WAAeiC,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,UAGiB,CAACtB,MAAAA,EAAAA,IAAzC,EAhBc,SAACT,GAEX,OAAIA,EAAM+B,QACC,SAAC,KAAD,CAAUE,GAAI,cAGlB,4BACH,2DACA,SAAClC,EAAD,CAAWU,MAAOT,EAAMS","sources":["components/Login/Login.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {authAPI} from \"../../api/api\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport type initialValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: boolean,\r\n\r\n}\r\n\r\ntype ErrorsType = {\r\n    password?: string,\r\n    email?: string\r\n}\r\n\r\nconst validate = (values: initialValuesType) => {\r\n    const errors: ErrorsType = {};\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Before sending, you must fill in this field';\r\n    }\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Before sending, you must fill in this field';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const LoginForm = (props: any) => {\r\n\r\n    const formik = useFormik({\r\n\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: true,\r\n        },\r\n        validate,\r\n        onSubmit: (values: initialValuesType, {setSubmitting, setStatus}) => { //автоматически передается в кнопку, здесь моно сделать запрос на сервер\r\n            props.login(values, setStatus)\r\n            setSubmitting(false);\r\n        },\r\n    });\r\n    let errorsPassword: string = !!(formik.touched.password && formik.errors.password) ? \"pink\" : \"\"\r\n    let errorsEmail: string = !!(formik.touched.email && formik.errors.email) ? \"pink\" : \"\"\r\n\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input placeholder={\"Login\"}\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.email}\r\n                       id=\"email\"\r\n                       name=\"email\"\r\n                       onBlur={formik.handleBlur}\r\n                       style={{backgroundColor: errorsEmail}}\r\n\r\n                />\r\n                {errorsEmail ? (\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                ) : null}\r\n            </div>\r\n            <div>\r\n                <input placeholder={\"Password\"}\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.password}\r\n                       id=\"password\"\r\n                       name=\"password\"\r\n                       onBlur={formik.handleBlur}\r\n                       style={{backgroundColor: errorsPassword}}\r\n                       type={\"password\"}\r\n\r\n                />\r\n                {errorsPassword ? (\r\n                    <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                ) : null}\r\n\r\n            </div>\r\n            <div>\r\n                <input type={\"checkbox\"}\r\n                       onChange={formik.handleChange}\r\n                       checked={formik.values.rememberMe}\r\n                       id=\"rememberMe\"\r\n                       name=\"rememberMe\"\r\n\r\n\r\n                /> remember me\r\n            </div>\r\n            <div style={{color: \"red\"}}>\r\n                {formik.status}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <button type={\"submit\"} disabled={!!(formik.errors.email || !!formik.errors.password)}>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n\r\n}\r\nconst Login = (props: any) => {\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h2>Dear user, you need to log in</h2>\r\n        <LoginForm login={props.login}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n\r\n"],"names":["validate","values","errors","password","email","test","LoginForm","props","formik","useFormik","initialValues","rememberMe","captcha","onSubmit","setSubmitting","setStatus","login","errorsPassword","touched","errorsEmail","handleSubmit","placeholder","onChange","handleChange","value","id","name","onBlur","handleBlur","style","backgroundColor","color","type","checked","status","disabled","connect","state","isAuth","auth","to"],"sourceRoot":""}