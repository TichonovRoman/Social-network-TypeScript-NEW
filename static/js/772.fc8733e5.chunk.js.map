{"version":3,"file":"static/js/772.fc8733e5.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","../javascript/esm|C:/it-inkubator/Social-network (TypeScript) NEW/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../javascript/esm|C:/it-inkubator/Social-network (TypeScript) NEW/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/universalTextarea/MessageForm.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QHyFN\",\"dialog\":\"Dialogs_dialog__ER-Y+\",\"dialogsItems\":\"Dialogs_dialogsItems__wLLr7\",\"active\":\"Dialogs_active__ncZni\",\"messages\":\"Dialogs_messages__cl+cX\",\"img\":\"Dialogs_img__Z7Zp9\"};","import React from 'react';\r\nimport s from \"../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsPropsType = {\r\n    name: string,\r\n    id: string,\r\n    avatar:string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsPropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={\"/dialog/\" + props.id}>\r\n                <img className={s.img} src={props.avatar}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>)\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from \"../Dialogs.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm} from \"../universalTextarea/MessageForm\";\r\n\r\n\r\nconst Dialogs = ({dialogsPage, addMessage}: DialogsPropsType) => {\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(m => <DialogItem key={m.id} name={m.name} id={m.id}\r\n                                                                   avatar={m.avatar}/>)\r\n    let messagesElements = dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                <div className={s.active}>\r\n                    <DialogItem name={dialogsPage.dialogs[0].name} id={dialogsPage.dialogs[0].id}\r\n                                avatar={dialogsPage.dialogs[0].avatar}/>\r\n                </div>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageForm onSubmit={addMessage}\r\n                                placeholderText={\"Enter your message\"}\r\n                                textMaxLength={100}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dialogs;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): {isAuth: boolean} => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n\r\n\r\n    const RedirectComponent = (props: {isAuth: boolean}) => {\r\n        let {isAuth, ...restprops} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <Component {...restprops as T}/>\r\n    }\r\n\r\n\r\n\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectAuthRedirectComponent\r\n};\r\n\r\nexport default WithAuthRedirect;","import React, {ChangeEvent} from 'react';\r\nimport {\r\n    addMessageActionCreator,\r\n    MessagesPageType,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n// type DialogsPropsType = {\r\n//     messages: Array<MessagesDataType>\r\n//     dialogs: Array<DialogDataType>\r\n//     // updateNewMessageText: (text: string) => void\r\n//     // addMessage: () => void\r\n//     newMessageText: string\r\n//     dispatch: (action: ActionsTypes) => void\r\n// }\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: MessagesPageType,\r\n    // isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    // onMessageChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    addMessage: (text:string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        // onMessageChange: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        //     let text = e.currentTarget.value\r\n        //     let action = updateNewMessageTextActionCreator(text)\r\n        //     dispatch(action)\r\n        // },\r\n        addMessage: (text) => dispatch(addMessageActionCreator(text))\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>( //позволяет последовательно вызывать функции по очереди для Dialogs\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\ntype initialValuesType = {\r\n    textMessage: string,\r\n}\r\ntype AddMessageFormPropsType = {\r\n    onSubmit: (text: string) => void,\r\n    placeholderText: string,\r\n    textMaxLength: number\r\n}\r\n\r\ntype ErrorsType = {\r\n    textMessage?: string,\r\n}\r\n\r\n\r\nexport const AddMessageForm = (props: AddMessageFormPropsType) => {\r\n\r\n    const validate = (values: initialValuesType) => {\r\n        const errors: ErrorsType = {};\r\n        if (!values.textMessage) {\r\n            errors.textMessage = 'Before sending, you must fill in this field';\r\n        } else if (values.textMessage.length > props.textMaxLength) {\r\n            errors.textMessage = `Must be ${props.textMaxLength} characters or less`;\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n\r\n        initialValues: {\r\n            textMessage: '',\r\n        },\r\n        validate,\r\n        onSubmit: (values: initialValuesType) => { //автоматически передается в кнопку, здесь можно сделать запрос на сервер\r\n            props.onSubmit(values.textMessage)\r\n            formik.resetForm() //очищаем форму после сабмита\r\n        },\r\n    });\r\n\r\n\r\n    return  (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n\r\n                <textarea placeholder={props.placeholderText}\r\n                          onChange={formik.handleChange}\r\n                          value={formik.values.textMessage}\r\n                          id=\"textMessage\"\r\n                          name=\"textMessage\"\r\n                          style={{backgroundColor :formik.errors.textMessage ? \"pink\" : \"\"}}\r\n                />\r\n                {formik.errors.textMessage ? <div style={{color: \"red\"}}>{formik.errors.textMessage}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <button type={\"submit\"}>Add Message</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddMessageForm;"],"names":["props","className","s","to","id","src","avatar","name","message","dialogsPage","addMessage","dialogsElements","dialogs","map","m","messagesElements","messages","onSubmit","placeholderText","textMaxLength","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","state","isAuth","auth","Component","connect","restprops","compose","dispatch","text","addMessageActionCreator","withAuthRedirect","Dialogs","AddMessageForm","formik","useFormik","initialValues","textMessage","validate","values","errors","resetForm","handleSubmit","placeholder","onChange","handleChange","value","style","backgroundColor","color","type"],"sourceRoot":""}