{"version":3,"file":"static/js/528.5a291db9.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/universalTextarea/MessageForm.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sunflowerImg\":\"ProfileInfo_sunflowerImg__DlzwZ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__h15iB\",\"mainPhoto\":\"ProfileInfo_mainPhoto__ue7gn\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n    let [spanOn, setSpanOn] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setSpanOn(false)\r\n    }\r\n    const deactivateEditModeAndSetStatus = () => {\r\n        setSpanOn(true)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {spanOn\r\n            ? <div>\r\n                <b>Мой статус: </b>\r\n                    <span onDoubleClick={activateMode}>{status || \"-------\"}</span>\r\n\r\n            </div>\r\n            : <div>\r\n                <input\r\n                    onChange={onChangeHandler}\r\n                    onBlur={deactivateEditModeAndSetStatus}\r\n                    autoFocus value={status}/>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {ChangeEvent} from 'react';\r\nimport imgPicture from \"../../../img/SunFlower.jpg\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport NotFoundFoto from \"../../../img/FotoNotFound.jpg\";\r\n//\r\n// export type ProfileInfoType ={\r\n//         \"aboutMe\": string,\r\n//         \"contacts\": {\r\n//             \"github\": string,\r\n//             \"vk\": string,\r\n//             \"facebook\": string,\r\n//             \"instagram\": string,\r\n//             \"twitter\": string,\r\n//             \"website\": string,\r\n//             \"youtube\": string,\r\n//             \"mainLink\": string,\r\n//         },\r\n//         \"lookingForAJob\": boolean,\r\n//         \"lookingForAJobDescription\": string,\r\n//         \"fullName\": string,\r\n//         \"userId\": number,\r\n//         photos: {\r\n//             small: string,\r\n//             large: string,\r\n//         }\r\n// }\r\n\r\nexport type ProfileInfoType = any\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileInfoType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: object) => void\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.sunflowerImg} src={imgPicture}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n\r\n                <img\r\n                    src={profile.photos.large || NotFoundFoto}\r\n                    className={s.mainPhoto}\r\n                />\r\n                {isOwner && <input type={\"file\"} accept=\"image/*\" onChange={onMainPhotoSelected}/>}\r\n\r\n                <div>\r\n                    <div>\r\n                        <b>Меня зовут:</b> {profile.fullName}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <b>Ищу работу:</b> {profile.lookingForAJob ? \"Да\" : \"Нет\"}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>Мои навыки:</b> {profile.lookingForAJobDescription}\r\n                        </div>}\r\n                    <div>\r\n                        <b>Обо мне:</b> {profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        <b>Контакты:</b> {Object.keys(profile.contacts).map(key => {\r\n\r\n                            return <Contacts key={key} contactTitle = {key} contactValue={profile.contacts[key]}/>\r\n                    })}\r\n                    </div>\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype contactsPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\n\r\nconst Contacts = ({contactTitle, contactValue}: contactsPropsType) => {\r\n    return <div style={{paddingLeft: \"10px\"}}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__1EBZo\",\"posts\":\"MyPosts_posts__8aaC-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__X70zz\"};","import React from 'react';\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://скачать-ватсап-бесплатно.рус/wp-content/uploads/2018/10/avatarka-dlya-devushek-vatsap-7.jpg'/>\r\n            {props.message}\r\n            <div>Like: {props.likesCount}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {PostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddMessageForm} from \"../../universalTextarea/MessageForm\";\r\n\r\n\r\nconst MyPosts = React.memo(({posts, addPost}: PostsPropsType) => {\r\n\r\n    let postsElements = posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddMessageForm onSubmit={addPost}\r\n                                placeholderText={\"Enter your post\"}\r\n                                textMaxLength={100}\r\n                />\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// type MyPostsPropsType = {\r\n//     posts: Array<PostsDataType>\r\n//     dispatch: (action: ActionsTypes) => void\r\n//     newPostText: string\r\n//\r\n// }\r\nexport type PostsDataType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsDataType>,\r\n    // newPostText: string\r\n\r\n}\r\n\r\ntype mapDispatchToProps = {\r\n    // onPostChange: (text: any) => void,\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type PostsPropsType = MapStatePropsType & mapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToProps => {\r\n    return {\r\n        // onPostChange: (text: any) => dispatch(updateNewPostTextActionCreator(text)),\r\n        addPost: (text) => dispatch(addPostActionCreator(text))\r\n    }\r\n\r\n\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo, {ProfileInfoPropsType} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props: ProfileInfoPropsType) => {\r\n\r\n     return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile = {props.profile}\r\n                status={props.status}\r\n                updateStatus = {props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, savePhoto, setStatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nimport {compose} from \"redux\";\r\nimport {ProfileInfoType} from \"./ProfileInfo/ProfileInfo\";\r\n\r\ntype PathParamsType = {\r\n    userId: string,\r\n}\r\n\r\n\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void,\r\n    setStatus: (userId: string) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file: object) => void,\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileInfoType | null,\r\n    // isAuth: boolean\r\n    status: string,\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean,\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : \"\"\r\n            if (!userId) this.props.history.push(\"/login\")\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.setStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto = {this.props.savePhoto}\r\n            />\r\n            )\r\n        ;\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, setStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\ntype initialValuesType = {\r\n    textMessage: string,\r\n}\r\ntype AddMessageFormPropsType = {\r\n    onSubmit: (text: string) => void,\r\n    placeholderText: string,\r\n    textMaxLength: number\r\n}\r\n\r\ntype ErrorsType = {\r\n    textMessage?: string,\r\n}\r\n\r\n\r\nexport const AddMessageForm = (props: AddMessageFormPropsType) => {\r\n\r\n    const validate = (values: initialValuesType) => {\r\n        const errors: ErrorsType = {};\r\n        if (!values.textMessage) {\r\n            errors.textMessage = 'Before sending, you must fill in this field';\r\n        } else if (values.textMessage.length > props.textMaxLength) {\r\n            errors.textMessage = `Must be ${props.textMaxLength} characters or less`;\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n\r\n        initialValues: {\r\n            textMessage: '',\r\n        },\r\n        validate,\r\n        onSubmit: (values: initialValuesType) => { //автоматически передается в кнопку, здесь можно сделать запрос на сервер\r\n            props.onSubmit(values.textMessage)\r\n            formik.resetForm() //очищаем форму после сабмита\r\n        },\r\n    });\r\n\r\n\r\n    return  (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n\r\n                <textarea placeholder={props.placeholderText}\r\n                          onChange={formik.handleChange}\r\n                          value={formik.values.textMessage}\r\n                          id=\"textMessage\"\r\n                          name=\"textMessage\"\r\n                          style={{backgroundColor :formik.errors.textMessage ? \"pink\" : \"\"}}\r\n                />\r\n                {formik.errors.textMessage ? <div style={{color: \"red\"}}>{formik.errors.textMessage}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <button type={\"submit\"}>Add Message</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddMessageForm;"],"names":["props","useState","status","setStatus","spanOn","setSpanOn","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","Contacts","contactTitle","contactValue","style","paddingLeft","profile","isOwner","savePhoto","Preloader","className","s","src","imgPicture","photos","large","NotFoundFoto","type","accept","target","files","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","message","likesCount","React","posts","addPost","postsElements","p","id","onSubmit","placeholderText","textMaxLength","connect","state","profilePage","dispatch","text","addPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","AddMessageForm","formik","useFormik","initialValues","textMessage","validate","values","errors","length","resetForm","handleSubmit","placeholder","handleChange","name","backgroundColor","color"],"sourceRoot":""}